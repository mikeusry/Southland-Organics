<?php

/**
 * @file
 * Ubercart Catalog module main filters.
 *
 * Provides main filters generates by advanced_catalog
 * @todo add taxonomy and cck ordering filters
 *
 */

/**
 * Advanced catalog core filters
 *
 * The uc_advanced catalog module comes with a filter manager found at Administer »
 * Store administration » Settings » Advanced Catalog settings.
 *
 * @param $defaults
 *   Array of defaults or current user settings as $key => $value.
 *     Key is filter name and $value the default current value.
 * @param $variables
 *   Provide some variables from the views generated by the module
 *   - 'count': Result count of the view, 0 if empty
 *   - 'total': The total number of results generate by the view for the current page
 * @return
 *   Return an array of filters definition
 *   Each filter is an array with this definition
 *   - 'name': (Required) Internal machine name
 *   - 'edit': (Required) Array of element being used on edit form
 *     -- '#title': (Required) Human name on edit filters form
 *     -- '#description': (Optional)
 *     -- 'default': (Optional) Default cols
 *       --- '#type': type of element, textfield, select or markup
 *           Depending of type, values of element as From API described
 *           http://api.drupal.org/node/14722
 *     -- 'options': (Optional) Options cols
 *       --- '#multiple': set True if return array of options, default FALSE
 *           if multiple, array of options where key is the name of each option
 *            'options' => array(
 *              '#multiple' => TRUE,
 *                'option1' => array(
 *                  // element options with #type
 *                ),
 *                'option2' => array(
 *                  // element options with #type
 *                ),
 *             ),
 *          else a simple array
 *            'options' => array(
 *              '#multiple' => FALSE, // optional
 *              '#type' => 'textfield',
 *              // any othe fields depending on type
 *             ),
 *        --- '#type': type of element, textfield, select, markup or checkbox
 *        --- Depending of type, values of element as From API described
 *   - 'view': (Required) Element being used on display filters
 *       --- '#type': type of element, textfield, select or markup
 *   - '#weight': (Optional) Default element weight
 */
function uc_advanced_catalog_catalog_filters($defaults = array(), $variables = array()) {

  $images_path = drupal_get_path('module', 'uc_advanced_catalog') .'/images/';

  // extra pager information filter
  $variables['total'] ? $total = $variables['total']: $total = 0;
  $start = $_REQUEST['page'] * $defaults['limit'] + 1;
  $variables['count'] ? $end = $variables['count'] + $_REQUEST['page'] * $defaults['limit']: $end = 0;
  if ($end > $total) {
    $end = $total;
  }
  $text_settings = variable_get('uc_advanced_catalog_extra_settings_text', t('Items !start to !end of !total total'));
  $value = strtr($text_settings, array('!start' => $start, '!end' => $end, '!total' => $total));
  $fields[] = array(
    'name' => 'extra',
    'edit' => array(
      '#title' => t('Pagination'),
      'options' => array(
        '#value' => t('Display:') .' '. $text_settings .'<br/>'. t('See filter settings below to change text.'),
      ),
    ),
    'view' => array(
      '#type' => 'markup',
      '#value' => $value,
    ),
    '#default_state' => TRUE,
    '#weight' => 1,
  );

  // limit pager filter
  $options = explode(',', variable_get('uc_advanced_catalog_limit_options', '12,20,28,'. t('all')));
  $options =  array_combine($options, $options);
  $fields[] = array(
    'name' => 'limit',
    'edit' => array(
      '#title' => t('Limit'),
      'default' => array(
        '#type' => 'textfield',
        '#size' => 3,
        '#default_value' => variable_get('uc_product_nodes_per_page', 12),
      ),
      'options' => array(
        '#type' => 'textfield',
        '#description' => t('Specify limit option values available. Separate each with comma. Notice that if you are using grid display all values must be multiple of the grid width value, otherwise the last row will not match. <em>all</em> can be used to display all values. It make more sense to have default value in the options list.'),
        '#default_value' => '12,20,28,'. t('all'),
        '#size' => 30,
      ),
    ),
    'view' => array(
      '#type' => 'select',
      '#prefix' => variable_get('uc_advanced_catalog_limit_settings_prefix', t('Show')),
      '#suffix' => variable_get('uc_advanced_catalog_limit_settings_suffix', t('per page')),
      '#options' => $options,
    ),
    '#default_state' => TRUE,
    '#weight' => 2,
  );

  // display mode filter
  $show_mode = FALSE;
  $view_as = variable_get('uc_advanced_catalog_mode_settings_prefix', t('View as')) .' ';
  $mode = $defaults['mode'];
  if (variable_get('uc_advanced_catalog_mode_option_grid', TRUE)) {
    $show_mode = TRUE;
    if ($mode == 'grid') {
      $view_as .= '&nbsp;<strong>'. t('Grid') .'</strong>&nbsp;';
    }
    else {
      $view_as .= '&nbsp;'. l(t('Grid'), $_GET['q'], array('html' => TRUE, 'query' => array('mode' => 'grid'))) .'&nbsp;';
    }
  }
  if (variable_get('uc_advanced_catalog_mode_option_table', TRUE)) {
    $show_mode = TRUE;
    if ($mode == 'table') {
      $view_as .= '&nbsp;<strong>'. t('Table') .'</strong>&nbsp;';
    }
    else {
      $view_as .= '&nbsp;'. l(t('Table'), $_GET['q'], array('html' => TRUE, 'query' => array('mode' => 'table'))) .'&nbsp;';
    }
  }
  if (variable_get('uc_advanced_catalog_mode_option_list', TRUE)) {
    $show_mode = TRUE;
    if ($mode == 'list') {
      $view_as .= '&nbsp;<strong>'. t('List') .'</strong>&nbsp;';
    }
    else {
      $view_as .= '&nbsp;'. l(t('List'), $_GET['q'], array('html' => TRUE, 'query' => array('mode' => 'list'))) .'&nbsp;';
    }
  }
  $fields[] = array(
    'name' => 'mode',
    'edit' => array(
      '#title' => t('View as'),
      'default' => array(
        '#type' => 'select',
        '#options' => array(
          'grid' => t('Grid view'),
          'table' => t('Table view'),
          'list' => t('List view'),
        ),
        '#default_value' => 'grid',
      ),
      'options' => array(
        '#multiple' => TRUE,
        'grid' => array(
          '#type' => 'checkbox',
          '#title' => t('Grid view'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('Grid view enabled.'),
            ''
          ),
        ),
        'table' => array(
          '#type' => 'checkbox',
          '#title' => t('Table view'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('Table view enabled.'),
            ''
          ),
        ),
        'list' => array(
          '#type' => 'checkbox',
          '#title' => t('List view'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('List view enabled.'),
            ''
          ),
        ),
      ),
    ),
    'view' => array(
      '#type' => 'markup',
      '#value' => $view_as,
    ),
    '#default_state' => TRUE,
    '#weight' => 3,
  );

  // ordering filter (order)
  $defaults['order'] ? $order = $defaults['order']: $order = 'ordering';
  $options = array();
  $sort_prefix = variable_get('uc_advanced_catalog_sort_settings_prefix', t('Sort by'));
  $order_options = array(
    'ordering' => t('Position'),
    'title' => t('Name'),
    'sell_price' => t('Price'),
    'weight' => t('Weight'),
    'length' => t('Length'),
    'width' => t('Width'),
    'height' => t('Height'),
  );
  foreach ($order_options AS $order_key => $order_value) {
    if (variable_get('uc_advanced_catalog_order_option_'. $order_key, TRUE)) {
      $options[$order_key] = $order_value;
    }
  }
  if (count($options) > 1) {
    $order_view = array(
      '#type' => 'select',
      '#prefix' => $sort_prefix .' ',
      '#options' => $options,
    );
  }
  else {
    $order_view = array(
      '#type' => 'markup',
      '#value' => $sort_prefix .' '. drupal_strtolower($options[$order]),
    );
  }
  $fields[] = array(
    'name' => 'order',
    'edit' => array(
      '#title' => t('Ordering'),
      'default' => array(
        '#type' => 'select',
        '#options' => $order_options,
        '#default_value' => $order,
      ),
      'options' => array(
        '#multiple' => TRUE,
        'ordering' => array(
          '#type' => 'checkbox',
          '#title' => t('Position'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('Ordering by !filter is enabled.', array('!filter' => t('Position'))),
            ''
          ),
        ),
        'title' => array(
          '#type' => 'checkbox',
          '#title' => t('Name'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('Ordering by !filter is enabled.', array('!filter' => t('Name'))),
            ''
          ),
        ),
        'sell_price' => array(
          '#type' => 'checkbox',
          '#title' => t('Price'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('Ordering by !filter is enabled.', array('!filter' => t('Price'))),
            ''
          ),
        ),
        'weight' => array(
          '#type' => 'checkbox',
          '#title' => t('Weight'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('Ordering by !filter is enabled.', array('!filter' => t('Weight'))),
            ''
          ),
        ),
        'length' => array(
          '#type' => 'checkbox',
          '#title' => t('Length'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('Ordering by !filter is enabled.', array('!filter' => t('Length'))),
            ''
          ),
        ),
        'width' => array(
          '#type' => 'checkbox',
          '#title' => t('Width'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('Ordering by !filter is enabled.', array('!filter' => t('Width'))),
            ''
          ),
        ),
        'height' => array(
          '#type' => 'checkbox',
          '#title' => t('Height'),
          '#default_value' => TRUE,
          '#summary callback' => 'summarize_checkbox',
          '#summary arguments' => array(
            t('Ordering by !filter is enabled.', array('!filter' => t('Height'))),
            ''
          ),
        ),
      ),
    ),
    'view' => $order_view,
    '#default_state' => TRUE,
    '#weight' => 4,
  );

  // sort type filter (asc, desc)
  $defaults['sort'] ? $sort = $defaults['sort'] : $sort = 'DESC'; // is this really needed ?
  $options = array(
    'ASC' => t('Ascending'),
    'DESC' => t('Descending'),
  );
  $display = variable_get('uc_advanced_catalog_sort_options', 'image');
  if ($display == 'image') {
    switch ($sort) {
      case 'ASC':
        $img = $images_path .'arrow-desc.png';
        $alt = t('descending');
        $sort = 'DESC';
        break;
      DEFAULT:
        $img = $images_path .'arrow-asc.png';
        $alt = t('ascending');
        $sort = 'ASC';
    }
    $icon_img = theme('image', $img, $alt, t('Click to sort !sort', array('!sort' => $alt)));
    $sort_view = array(
      '#type' => 'markup',
      '#value' => l($icon_img, $_GET['q'], array('html' => TRUE, 'query' => array('sort' => $sort))),
    );
  }
  else {
    $sort_view = array(
      '#type' => 'select',
      '#options' => $options,
    );
  }
  $fields[] = array(
    'name' => 'sort',
    'edit' => array(
      '#title' => t('Sort'),
      'default' => array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => 'DESC',
      ),
      'options' => array(
        '#type' => 'select',
        '#options' => array('image' => t('Image'), 'select' => t('Select')),
        '#description' => t('Specify filter apparence, use image or select field.'),
        '#default_value' => 'image',
      ),
    ),
    'view' => $sort_view,
    '#default_state' => TRUE,
    '#weight' => 5,
  );

  // Taxonomy filter
  if (module_exists('taxonomy')) {
    // get product types
    $types = uc_product_types();
    foreach ($types AS $type) {
      //$type = 'product';
      // get taxonomy list
      $vocabularies = taxonomy_get_vocabularies($type);
      // remove main vocabulary (used as navigation !)
      $catalog_vid = variable_get('uc_catalog_vid', NULL);
      unset($vocabularies[$catalog_vid]);
      foreach ($vocabularies as $vocabulary) {
        $options = uc_advanced_catalog_taxonomy_get_tree($vocabulary->vid);
        $fields[] = array(
          'name' => 'taxonomy_'. $vocabulary->vid,
          'edit' => array(
            '#title' => $vocabulary->name,
            'default' => array(
              '#type' => 'select',
              '#options' => $options,
            ),
            '#description' => t('Taxonomy filter'),
          ),
          'view' => array(
            '#type' => 'select',
            '#prefix' => $vocabulary->name,
            '#options' => $options,
          ),
          '#weight' => 6,
          '#default_state' => FALSE,
        );
      }
    }
  }
  // cck filter
  $cck_supported = array(
    'optionwidgets_select',
    'optionwidgets_buttons',
    'optionwidgets_onoff',
    //'number',
    //@todo: test
    'nodereference_select',
    'nodereference_buttons',
    'userreference_select',
    'userreference_buttons',
  );

  $types = uc_product_types();
  // get all cck fields info
  $cck = _content_type_info();
  foreach ($types AS $type) {
    foreach ($cck['content types'][$type]['fields'] AS $field) {
      if (in_array($field['widget']['type'], $cck_supported)) {
        $fields[] = uc_advanced_catalog_cck_get_cck_fields($field, $type);
      }
    }
  }

  // Product attributes
  // @todo: support class attributes
  if (module_exists('uc_attribute')) {
    $attributes = uc_advanced_catalog_get_attributes();
    foreach ($attributes AS $aid => $attribute) {
      $options = uc_advanced_catalog_get_attributes_options($aid);
      $fields[] = array(
        'name' => 'attributes_'. $aid,
        'edit' => array(
          '#title' => $attribute,
          'default' => array(
            '#type' => 'select',
            '#options' => $options,
          ),
          '#description' => t('Product attributes'),
        ),
        'view' => array(
          '#type' => 'select',
          '#prefix' => $attribute,
          '#options' => $options,
        ),
        '#weight' => 8,
        '#default_state' => FALSE,
      );
    }
  }
  return $fields;
}

/*
 * code from http://api.drupal.org/node/10372#comment-1623
 */
function uc_advanced_catalog_taxonomy_get_tree($vocabulary_id) {
  $tree = taxonomy_get_tree($vocabulary_id);
  $types = uc_product_types();
  $options['all'] = t('All');
  if ($tree) {
    foreach ($tree as $term) {
      $num = 0;
      foreach ($types as $type) {
        $num += taxonomy_term_count_nodes($term->tid, $type);
      }
      // Display only if nodes in category or descendants.
      if ($num) {
        $options[$term->tid] = str_repeat('-', $term->depth) . $term->name;
      }
    }
  }
  return $options;
}

function uc_advanced_catalog_cck_get_cck_fields($field, $type) {
  $options = array();
  switch ($field['widget']['type']) {
    case 'optionwidgets_select':
    case 'nodereference_select':
    case 'userreference_select':
    case 'optionwidgets_buttons':
    case 'nodereference_buttons':
    case 'userreference_buttons':
    case 'optionwidgets_onoff':
      $options['all'] = t('All');
      $options += optionwidgets_options($field);
      $element_type = 'select';
      break;
     /*
    case 'number':
      $options['all'] = t('All');
      $options += array('work in progress...');
      $element_type = 'select';
      break;
    */
  }
  // no N/A option
  unset($options['']);

  $element = array(
    // cck_FIELDNAME-DBSTORAGE-TYPE
    'name' => 'cck_'. $field['field_name'] .'-'. $field['db_storage'] .'-'. $type,
    'edit' => array(
      '#title' => $field['widget']['label'],
      'default' => array(
        '#type' => 'select',
        '#options' => $options,
      ),
      '#description' => t('CCK filter') .' ('. $type .')',
    ),
    'view' => array(
      '#type' => $element_type,
      '#prefix' => $field['widget']['label'],
      '#options' => $options,
    ),
    '#weight' => 7,
    '#default_state' => FALSE,
  );
  return $element;
}

/**
 * Load all attributes.
 */
function uc_advanced_catalog_get_attributes($types = array()) {
  $attributes = array();

  $result = db_query("SELECT aid, label FROM {uc_attributes} WHERE display <> %d", 0);
  while ($attribute = db_fetch_object($result)) {
    $attributes[$attribute->aid] = $attribute->label;
  }

  return $attributes;
}

/**
 * Load all options.
 */
function uc_advanced_catalog_get_attributes_options($aid) {
  $options['all'] = t('All');

  $result = db_query("SELECT oid, name FROM {uc_attribute_options} WHERE aid = %d ORDER BY ordering ASC", $aid);
  while ($option = db_fetch_object($result)) {
    $options[$option->oid] = $option->name;
  }

  return $options;
}
